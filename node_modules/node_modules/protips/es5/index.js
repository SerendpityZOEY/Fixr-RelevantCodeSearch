'use strict';

var path = require('path');
var fs = require('fs');
var marked = require('marked');
var chalk = require('chalk');
var renderer = Object.create(new marked.Renderer());

// copied from marked
function unescape(html) {
	return html.replace(/&([#\w]+);/g, function (_, n) {
		n = n.toLowerCase();
		if (n === 'colon') return ':';
		if (n.charAt(0) === '#') {
			return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
		}
		return '';
	});
}

var headingRenderer = renderer.heading.bind(renderer);
renderer.heading = function (text, level) {
	if (level === 1) {
		tipHeading = text;
		return '';
	} else {
		return unescape(headingRenderer(text, level));
	}
};

var hrRenderer = renderer.hr.bind(renderer);
renderer.hr = function () {
	return 'PROTIPS_HORIZONTAL_RULE';
};

var codeRenderer = renderer.code.bind(renderer);
renderer.code = function (text) {
	return unescape(chalk.cyan('\n\n' + text + '\n'));
};

var paragraphRenderer = renderer.paragraph.bind(renderer);
renderer.paragraph = function (text) {
	return unescape('\n' + text);
};

var emRenderer = renderer.em.bind(renderer);
renderer.em = function (text) {
	return unescape(chalk.yellow('' + text));
};

var strongRenderer = renderer.strong.bind(renderer);
renderer.strong = function (text) {
	return unescape(chalk.underline.red('' + text));
};

var codespanRenderer = renderer.codespan.bind(renderer);
renderer.codespan = function (text) {
	return unescape(chalk.cyan('`' + text + '`'));
};

var brRenderer = renderer.br.bind(renderer);
renderer.br = function () {
	return unescape('\n');
};

var linkRenderer = renderer.link.bind(renderer);
renderer.link = function (href) {
	return unescape(chalk.magenta(href));
};

var tipHeading = '';

marked.setOptions({
	renderer: renderer
});

function getProtips(sources) {
	return sources.map(function (source) {

		if (/\.(md|markdown)$/.test(source)) {
			return fs.readFileSync(source, 'utf8');
		}
	}).reduce(function (tips, md) {
		tipHeading = '';
		return tips.concat(marked(md).split('PROTIPS_HORIZONTAL_RULE').map(function (tip) {
			return '' + chalk.green(protips.bookend + 'Pro tip for ' + tipHeading + ':') + tip + (protips.bookend ? chalk.green('\n/* * * * * * * * * * * * * * * * * * * * * * * */') : '');
		}));
	}, []);
}

function protips() {
	for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
		sources[_key] = arguments[_key];
	}

	var tips = getProtips(sources);
	protips.log(tips[Math.floor(Math.random() * tips.length)]);
}

module.exports = protips;

module.exports.bookend = '/* * * * * * * * * * * * * * * * * * * * * * * */\n';

module.exports.all = function () {
	for (var _len2 = arguments.length, sources = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		sources[_key2] = arguments[_key2];
	}

	var tips = getProtips(sources);
	tips.forEach(function (tip) {
		return protips.log(tip);
	});
};

module.exports.log = function (text) {
	process.on('exit', function () {
		console.log(text);
	});
};